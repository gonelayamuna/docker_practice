---
name: Build and Push Image to AWS ECR
on:
  push:
    branches: [ main ]
permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
        aws-access-key-id: ${{ secrets.DHANYA_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DHANYA_SECRET_KEY }}
        role-duration-seconds: 900 # the ttl of the session, in seconds.
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        bash ./image_tag_update.sh major
    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custom-tools
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        echo $IMAGE_TAG
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name : Display pkg list
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custom-tools
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        echo "Installed software list"
        docker run -d --name $ECR_REPOSITORY-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker wait $ECR_REPOSITORY-$IMAGE_TAG
        docker exec $ECR_REPOSITORY-$IMAGE_TAG sh -c "dpkg -l" > softwarelist.txt
        cat softwarelist.txt
        