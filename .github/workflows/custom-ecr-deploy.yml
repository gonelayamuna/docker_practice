---
name: Build and Push Image to AWS ECR
on:
  push:
    branches: [ main ]
permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
        aws-access-key-id: ${{ secrets.DHANYA_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DHANYA_SECRET_KEY }}
        role-duration-seconds: 900 # the ttl of the session, in seconds.
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        bash ./image_tag_update.sh major
    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custom-tools
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        echo $IMAGE_TAG
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Display pkg list
      id: get_versions
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custom-tools
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        set -x
        echo "Installed software list"
        echo "JAVA_VERSION=$(docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG java -version 2>&1 | head -n 1 | awk -F '"' '{print $2}')" >> $GITHUB_ENV
        echo "MAVEN_VERSION=$(docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG mvn -v 2>&1)" >> $GITHUB_ENV
        echo "Java Version is : ${{ env.JAVA_VERSION }}"

    # - name: Extract List
    #   id: extract_versions
    #   uses: actions/github-script@v4
    #   with:
    #     script: |
    #       set -x
    #       const version1=`$(docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG java -version)`;
    #       const version2=`$(docker run $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG mvn -v)`;
    #       # core.setOutput('Version1', version1);
    #       # core.setOutput('Version2', version2);
    - name: Software List
      id: software_list
      run: |
        echo "Software Versions"
        echo "Java Version is: ${{ env.JAVA_VERSION }}"
        {
          echo "### :rocket: Workflow Output"
          echo "| Package                 | Version |"
          echo "| ------------------- | ----- |"
          echo "| Java        | ${{ env.JAVA_VERSION }} |"
          echo "| Python         | ${{ steps.get_versions.outputs.output }} |"
          echo "| Maven             | ${{ env.MAVEN_VERSION }} |"
        } >> $GITHUB_STEP_SUMMARY